<mah:MetroWindow x:Class="EducationProcess.Desktop.MainWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:viewmodels="clr-namespace:EducationProcess.Desktop.ViewModels"
                 xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:views="clr-namespace:EducationProcess.Desktop.Views"
                 xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                 xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                 xmlns:desktop="clr-namespace:EducationProcess.Desktop"
                 xmlns:helpers="clr-namespace:EducationProcess.Desktop.Helpers"
                 WindowTitleBrush="#FF0080FF"
                 Title="Учебный процесс"
                 Width="900"
                 Height="600"
                 d:DataContext="{d:DesignInstance viewmodels:MainWindowViewModel}"
                 d:DesignHeight="600"
                 d:DesignWidth="900"
                 mah:DialogParticipation.Register="{Binding}"
                 GlowBrush="#FF0080FF"
                 Background="{DynamicResource MahApps.Brushes.Accent2}"
                 NonActiveGlowBrush="#CDFF0000"
                 WindowStartupLocation="CenterScreen"
                 mc:Ignorable="d">
    <!--
        if using DialogParticipation on Windows which open/close frequently you will get a
        memory leak unless you unregister.  The easiest way to do this is in your Closing/Unloaded
        event, as so:
        
        DialogParticipation.SetRegister(this, null);
    -->
    <mah:MetroWindow.LeftWindowCommands>
        <mah:WindowCommands ShowSeparators="False">
            <Viewbox Stretch="Uniform" Margin="3,3,0,3">
                <iconPacks:PackIconOcticons  Kind="MortarBoard" Foreground="White"  />
            </Viewbox>
        </mah:WindowCommands>
    </mah:MetroWindow.LeftWindowCommands>
    <mah:MetroWindow.RightWindowCommands>
        <mah:WindowCommands ShowLastSeparator="False">
            <Button 
                    Content="{Binding HelloUserMessage}"
                    ToolTip="Flyouts demo window" />

        </mah:WindowCommands>
    </mah:MetroWindow.RightWindowCommands>

    <mah:MetroWindow.Resources>
        <ResourceDictionary>
            <!--  This is the template for the menu items.  -->
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type helpers:HamburgerMenuIconBadgedItem}">
                <Grid Height="48">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=CompactPaneLength}" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <mah:Badged Badge="{Binding Badge}" 
                                Margin="14" BadgeFontSize="14" BadgeMargin="-1" BadgeBackground="White" BadgeBorderBrush="DodgerBlue" BadgeBorderThickness="2" BadgeForeground="#FF0073E4">
                        <ContentControl
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{Binding Icon}"
                                        Focusable="False"
                                        IsTabStop="False" />
                    </mah:Badged>
                    <TextBlock Grid.Column="1"
                               VerticalAlignment="Center"
                               FontSize="16"
                               Text="{Binding Label}" />
                </Grid>
            </DataTemplate>

            <ObjectDataProvider x:Key="DisplayModeEnumValues"
                                MethodName="GetValues"
                                ObjectType="{x:Type mah:SplitViewDisplayMode}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="mah:SplitViewDisplayMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider x:Key="VisibilityEnumValues"
                                MethodName="GetValues"
                                ObjectType="{x:Type Visibility}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Visibility" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <Style x:Key="MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple"
                   BasedOn="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem}"
                   TargetType="{x:Type ListBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid x:Name="RootGrid"
                                  Background="Transparent"
                                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Grid Margin="{TemplateBinding BorderThickness}">
                                    <Grid HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Rectangle x:Name="SelectionIndicator"
                                                   Fill="{TemplateBinding Foreground}"
                                                   Focusable="False"
                                                   Opacity="0.0" />
                                    </Grid>
                                    <materialDesign:Ripple x:Name="ContentPresenter"
                                                           Padding="{TemplateBinding Padding}"
                                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                           Content="{TemplateBinding Content}"
                                                           ContentTemplate="{TemplateBinding ContentTemplate}"
                                                           ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                           Feedback="{DynamicResource MahApps.Brushes.Gray.MouseOver}"
                                                           Focusable="False"
                                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <Trigger Property="mah:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <Trigger Property="mah:ItemHelper.IsMouseRightButtonPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="RootGrid" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="mah:ItemHelper.ActiveSelectionBackgroundBrush" Value="#FF3399FF" />
                <Setter Property="mah:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundChromeWhite}" />
                <Setter Property="mah:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
                <Setter Property="mah:ItemHelper.DisabledSelectedBackgroundBrush" Value="#FF3399FF" />
                <Setter Property="mah:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
                <Setter Property="mah:ItemHelper.HoverBackgroundBrush" Value="#FF3399FF" />
                <Setter Property="mah:ItemHelper.HoverSelectedBackgroundBrush" Value="#FF3978FF" />
                <Setter Property="mah:ItemHelper.HoverSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundChromeWhite}" />
                <Setter Property="mah:ItemHelper.SelectedBackgroundBrush" Value="#FF3399FF" />
                <Setter Property="mah:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundChromeWhite}" />
            </Style>

            <Style x:Key="MahApps.Styles.HamburgerMenu.Ripple"
                   BasedOn="{StaticResource MahApps.Styles.HamburgerMenu}"
                   TargetType="{x:Type mah:HamburgerMenu}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
                <Setter Property="OptionsItemContainerStyle" Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
                <Setter Property="PaneBackground" Value="#FF0062C3" />
                <Setter Property="PaneForeground" Value="#FFC0FFFF" />
                <Setter Property="ShowSelectionIndicator" Value="True" />
            </Style>

        </ResourceDictionary>
    </mah:MetroWindow.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Row="1">
            <mah:HamburgerMenu x:Name="HamburgerMenuControl"
                               HamburgerWidth="48"
                               ItemInvoked="HamburgerMenuControl_OnItemInvoked"
                               ItemTemplate="{StaticResource MenuItemTemplate}"
                               OptionsItemTemplate="{StaticResource MenuItemTemplate}" 
                               DisplayMode="CompactOverlay"
                               SelectedIndex="0"
                               Style="{StaticResource MahApps.Styles.HamburgerMenu.Ripple}"
                               VerticalScrollBarOnLeftSide="False">
                <mah:HamburgerMenu.HamburgerMenuHeaderTemplate>
                    <DataTemplate>
                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="19"
                                   Foreground="White"
                                   Text="Панель навигации" />
                    </DataTemplate>
                </mah:HamburgerMenu.HamburgerMenuHeaderTemplate>
                <!--  Items  -->
                <mah:HamburgerMenu.ItemsSource>
                    <mah:HamburgerMenuItemCollection>
                        <helpers:HamburgerMenuIconBadgedItem Icon="{iconPacks:Material Kind=Home}" Label="Home">
                            <helpers:HamburgerMenuIconBadgedItem.Tag>
                                <ScrollViewer Margin="2"
                                              HorizontalScrollBarVisibility="Auto"
                                              VerticalScrollBarVisibility="Auto">
                                    <Grid>
                                        <Label Content="Я честно не знаю, что может здесь такое быть..."></Label>
                                        <Button Content="Вывести сообщение" Command="{Binding ShowInputDialogCommand}" VerticalAlignment="Center"/>
                                    </Grid>
                                </ScrollViewer>
                            </helpers:HamburgerMenuIconBadgedItem.Tag>
                        </helpers:HamburgerMenuIconBadgedItem>
                        <helpers:HamburgerMenuIconBadgedItem Icon="{iconPacks:Modern Kind=BookHardcoverOpenWriting}" Label="Учебный план">
                            <helpers:HamburgerMenuIconBadgedItem.Tag>
                                <views:EducationalActivitiesView />
                            </helpers:HamburgerMenuIconBadgedItem.Tag>
                        </helpers:HamburgerMenuIconBadgedItem>
                        <helpers:HamburgerMenuIconBadgedItem Icon="{iconPacks:VaadinIcons Kind=AcademyCap}" Label="Дисциплины">
                            <helpers:HamburgerMenuIconBadgedItem.Tag>
                                <views:CheckDisciplineSuggestionsView />
                            </helpers:HamburgerMenuIconBadgedItem.Tag>
                        </helpers:HamburgerMenuIconBadgedItem>
                    </mah:HamburgerMenuItemCollection>
                </mah:HamburgerMenu.ItemsSource>

                <!--  Options  -->
                <mah:HamburgerMenu.OptionsItemsSource>
                    <mah:HamburgerMenuItemCollection>
                        <helpers:HamburgerMenuIconBadgedItem Icon="{iconPacks:Material Kind=Cog}" Label="Settings">
                            <helpers:HamburgerMenuIconBadgedItem.Tag>
                                <views:GroupsScheduleView />
                            </helpers:HamburgerMenuIconBadgedItem.Tag>
                        </helpers:HamburgerMenuIconBadgedItem>
                    </mah:HamburgerMenuItemCollection>
                </mah:HamburgerMenu.OptionsItemsSource>

                <mah:HamburgerMenu.ContentTemplate>
                    <DataTemplate DataType="{x:Type mah:HamburgerMenuIconItem}">
                        <Grid Margin="0 0 0 0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid Row="0" 
                                  Background="#FF006DDA">
                                <TextBlock Grid.Row="0"
                                           Padding="10"
                                           Foreground="White"
                                           FontSize="18"
                                           Text="{Binding Label}" />
                            </Grid>
                            <ScrollViewer Grid.Row="1"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Disabled"
                                          VerticalScrollBarVisibility="Auto">
                                <Border CornerRadius="10" Background="White" Margin="8">
                                    <ContentControl Content="{Binding Tag}" Focusable="False" />
                                </Border>
                            </ScrollViewer>
                        </Grid>
                    </DataTemplate>
                </mah:HamburgerMenu.ContentTemplate>
            </mah:HamburgerMenu>
        </Grid>

        <StatusBar Grid.Row="2">
            <StatusBarItem Content="{Binding UserRole}"></StatusBarItem>
            <Separator Style="{StaticResource MahApps.Styles.Separator.StatusBar}" />
            <StatusBarItem>Выбранное окно:</StatusBarItem>
            <StatusBarItem Content="{Binding ElementName=MainTabControl, Path=SelectedItem.Header, Mode=OneWay}" />
        </StatusBar>

    </Grid>
</mah:MetroWindow>