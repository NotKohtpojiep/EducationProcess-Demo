// <auto-generated />
using System;
using EducationProcess.Desktop.DataAccess.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationProcess.Desktop.DataAccess.Migrations
{
    [DbContext(typeof(EducationProcessContext))]
    [Migration("20210523085629_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Academic_year_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("BeginingYear")
                        .HasColumnType("smallint")
                        .HasColumnName("Begining_year");

                    b.Property<short>("EndingYear")
                        .HasColumnType("smallint")
                        .HasColumnName("Ending_year");

                    b.HasKey("AcademicYearId");

                    b.ToTable("Academic_years");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Account_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("AccountId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Audience", b =>
                {
                    b.Property<int>("AudienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Audience_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeHeadId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_head_id");

                    b.Property<string>("Name")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("AudienceId");

                    b.HasIndex("EmployeeHeadId");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Cathedra", b =>
                {
                    b.Property<int>("CathedraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cathedra_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("CathedraId");

                    b.ToTable("Cathedras");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.CathedraSpecialty", b =>
                {
                    b.Property<int>("CathedraId")
                        .HasColumnType("int")
                        .HasColumnName("Cathedra_id");

                    b.Property<int>("SpecialtieId")
                        .HasColumnType("int")
                        .HasColumnName("Specialtie_id");

                    b.HasKey("CathedraId", "SpecialtieId");

                    b.HasIndex("SpecialtieId");

                    b.ToTable("Cathedra_specialties");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ConductedPair", b =>
                {
                    b.Property<int>("ConductedPairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Conducted_pair_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonType")
                        .HasColumnType("int")
                        .HasColumnName("Lesson_type");

                    b.Property<int?>("ScheduleDisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Schedule_discipline_id");

                    b.Property<int?>("ScheduleDisciplineReplacementId")
                        .HasColumnType("int")
                        .HasColumnName("Schedule_discipline_replacement_id");

                    b.HasKey("ConductedPairId");

                    b.HasIndex("LessonType");

                    b.HasIndex("ScheduleDisciplineId");

                    b.HasIndex("ScheduleDisciplineReplacementId");

                    b.ToTable("Conducted_pairs");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discipline_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CathedraId")
                        .HasColumnType("int")
                        .HasColumnName("Cathedra_id");

                    b.Property<string>("DisciplineIndex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Discipline_index");

                    b.Property<int>("EducationCycleId")
                        .HasColumnType("int")
                        .HasColumnName("Education_cycle_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("CathedraId");

                    b.HasIndex("EducationCycleId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationCyclesAndModule", b =>
                {
                    b.Property<int>("EducationCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Education_cycle_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationCycleIndex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Education_cycle_index");

                    b.Property<int?>("EducationCycleParentId")
                        .HasColumnType("int")
                        .HasColumnName("Education_cycle_parent_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("EducationCycleId");

                    b.HasIndex("EducationCycleParentId");

                    b.ToTable("Education_cycles_and_modules");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationForm", b =>
                {
                    b.Property<int>("EducationFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Education_form_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EducationFormId");

                    b.ToTable("Education_forms");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Education_level_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EducationLevelId");

                    b.ToTable("Education_levels");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationPlan", b =>
                {
                    b.Property<int>("EducationPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Education_plan_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int")
                        .HasColumnName("Academic_year_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<int>("SpecialtieId")
                        .HasColumnType("int")
                        .HasColumnName("Specialtie_id");

                    b.HasKey("EducationPlanId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("SpecialtieId");

                    b.ToTable("Education_plans");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationPlanSemesterDiscipline", b =>
                {
                    b.Property<int>("EducationPlanId")
                        .HasColumnType("int")
                        .HasColumnName("Education_plan_id");

                    b.Property<int>("SemesterDisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Semester_discipline_id");

                    b.HasKey("EducationPlanId", "SemesterDisciplineId");

                    b.HasIndex("SemesterDisciplineId");

                    b.ToTable("Education_plan_semester_disciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Middlename")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("Post_id");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PostId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.FixedDiscipline", b =>
                {
                    b.Property<int>("FixedDisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Fixed_discipline_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("Group_id");

                    b.Property<bool>("IsAgreed")
                        .HasColumnType("bit")
                        .HasColumnName("Is_agreed");

                    b.Property<int>("SemesterDisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Semester_discipline_id");

                    b.HasKey("FixedDisciplineId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SemesterDisciplineId");

                    b.ToTable("Fixed_disciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Group_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CourseNumber")
                        .HasColumnType("tinyint")
                        .HasColumnName("Course_number");

                    b.Property<int>("CuratorId")
                        .HasColumnType("int")
                        .HasColumnName("Curator_id");

                    b.Property<int?>("EducationPlanId")
                        .HasColumnType("int")
                        .HasColumnName("Education_plan_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("ReceiptYear")
                        .HasColumnType("smallint")
                        .HasColumnName("Receipt_year");

                    b.Property<int>("ReceivedEducationId")
                        .HasColumnType("int")
                        .HasColumnName("Received_education_id");

                    b.HasKey("GroupId");

                    b.HasIndex("CuratorId");

                    b.HasIndex("EducationPlanId");

                    b.HasIndex("ReceivedEducationId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.IntermediateCertificationForm", b =>
                {
                    b.Property<int>("CertificationFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Certification_form_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CertificationFormId");

                    b.ToTable("Intermediate_certification_forms");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Lesson_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.HasKey("LessonTypeId");

                    b.ToTable("Lesson_types");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Post_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducation", b =>
                {
                    b.Property<int>("ReceivedEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Received_education_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int")
                        .HasColumnName("Education_level_id");

                    b.Property<bool>("IsBudget")
                        .HasColumnType("bit")
                        .HasColumnName("Is_budget");

                    b.Property<int>("ReceivedEducationFormId")
                        .HasColumnType("int")
                        .HasColumnName("Received_education_form_id");

                    b.Property<int>("ReceivedSpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("Received_specialty_id");

                    b.Property<short>("StudyPeriodMonths")
                        .HasColumnType("smallint")
                        .HasColumnName("Study_period_months");

                    b.HasKey("ReceivedEducationId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("ReceivedEducationFormId");

                    b.HasIndex("ReceivedSpecialtyId");

                    b.ToTable("Received_educations");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducationForm", b =>
                {
                    b.Property<int>("ReceivedEducationFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Received_education_form_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("Additional_info");

                    b.Property<int>("EducationFormId")
                        .HasColumnType("int")
                        .HasColumnName("Education_form_id");

                    b.HasKey("ReceivedEducationFormId");

                    b.HasIndex("EducationFormId");

                    b.ToTable("Received_education_forms");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedSpecialty", b =>
                {
                    b.Property<int>("ReceivedSpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Received_specialty_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpecialtieId")
                        .HasColumnType("int")
                        .HasColumnName("Specialtie_id");

                    b.HasKey("ReceivedSpecialtyId");

                    b.HasIndex("SpecialtieId");

                    b.ToTable("Received_specialties");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ScheduleDiscipline", b =>
                {
                    b.Property<int>("ScheduleDisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Schedule_discipline_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("Audience_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FixedDisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Fixed_discipline_id");

                    b.Property<bool?>("IsEvenPair")
                        .HasColumnType("bit")
                        .HasColumnName("Is_even_pair");

                    b.Property<bool?>("IsFirstSubgroup")
                        .HasColumnType("bit")
                        .HasColumnName("Is_first_subgroup");

                    b.Property<int>("PairNumber")
                        .HasColumnType("int")
                        .HasColumnName("Pair_number");

                    b.HasKey("ScheduleDisciplineId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("FixedDisciplineId");

                    b.ToTable("Schedule_disciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ScheduleDisciplineReplacement", b =>
                {
                    b.Property<int>("SheduleDisciplineReplacementId")
                        .HasColumnType("int")
                        .HasColumnName("Shedule_discipline_replacement_id");

                    b.Property<int?>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("Audience_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FixedDisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Fixed_discipline_id");

                    b.Property<bool?>("IsFirstSubgroup")
                        .HasColumnType("bit")
                        .HasColumnName("Is_first_subgroup");

                    b.Property<int>("PairNumber")
                        .HasColumnType("int")
                        .HasColumnName("Pair_number");

                    b.Property<int?>("ScheduleDisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Schedule_discipline_id");

                    b.HasKey("SheduleDisciplineReplacementId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("FixedDisciplineId");

                    b.HasIndex("ScheduleDisciplineId");

                    b.ToTable("Schedule_discipline_replacement");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Semester_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint");

                    b.Property<byte>("WeeksCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("Weeks_count");

                    b.HasKey("SemesterId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.SemesterDiscipline", b =>
                {
                    b.Property<int>("SemesterDisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Semester_discipline_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificationFormId")
                        .HasColumnType("int")
                        .HasColumnName("Certification_form_id");

                    b.Property<short>("ConsultationHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Consultation_hours");

                    b.Property<short>("ControlWorkHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Control_work_hours");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("Discipline_id");

                    b.Property<short>("EducationalPracticeHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Educational_practice_hours");

                    b.Property<short>("ExamHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Exam_hours");

                    b.Property<short>("IndependentWorkHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Independent_work_hours");

                    b.Property<short>("LaboratoryWorkHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Laboratory_work_hours");

                    b.Property<short>("PracticeWorkHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Practice_work_hours");

                    b.Property<short>("ProductionPracticeHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Production_practice_hours");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int")
                        .HasColumnName("Semester_id");

                    b.Property<short>("TheoryLessonHours")
                        .HasColumnType("smallint")
                        .HasColumnName("Theory_lesson_hours");

                    b.HasKey("SemesterDisciplineId");

                    b.HasIndex("CertificationFormId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Semester_disciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Specialty", b =>
                {
                    b.Property<int>("SpecialtieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Specialtie_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ImplementedSpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Implemented_specialty_name");

                    b.Property<string>("SpecialtieCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Specialtie_code");

                    b.HasKey("SpecialtieId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Account", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Employee", "Employee")
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Account_Employees")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Audience", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Employee", "EmployeeHead")
                        .WithMany("Audiences")
                        .HasForeignKey("EmployeeHeadId")
                        .HasConstraintName("FK_Audiences_Employees");

                    b.Navigation("EmployeeHead");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.CathedraSpecialty", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Cathedra", "Cathedra")
                        .WithMany("CathedraSpecialties")
                        .HasForeignKey("CathedraId")
                        .HasConstraintName("FK_Cathedra_specialties_Cathedras")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Specialty", "Specialtie")
                        .WithMany("CathedraSpecialties")
                        .HasForeignKey("SpecialtieId")
                        .HasConstraintName("FK_Cathedra_specialties_Specialties")
                        .IsRequired();

                    b.Navigation("Cathedra");

                    b.Navigation("Specialtie");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ConductedPair", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.LessonType", "LessonTypeNavigation")
                        .WithMany("ConductedPairs")
                        .HasForeignKey("LessonType")
                        .HasConstraintName("FK_Conducted_pairs_Lesson_types")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.ScheduleDiscipline", "ScheduleDiscipline")
                        .WithMany("ConductedPairs")
                        .HasForeignKey("ScheduleDisciplineId")
                        .HasConstraintName("FK_Conducted_pairs_Schedule_disciplines1");

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.ScheduleDisciplineReplacement", "ScheduleDisciplineReplacement")
                        .WithMany("ConductedPairs")
                        .HasForeignKey("ScheduleDisciplineReplacementId")
                        .HasConstraintName("FK_Conducted_pairs_Schedule_discipline_replacement");

                    b.Navigation("LessonTypeNavigation");

                    b.Navigation("ScheduleDiscipline");

                    b.Navigation("ScheduleDisciplineReplacement");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Discipline", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Cathedra", "Cathedra")
                        .WithMany("Disciplines")
                        .HasForeignKey("CathedraId")
                        .HasConstraintName("FK_Disciplines_Cathedras");

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.EducationCyclesAndModule", "EducationCycle")
                        .WithMany("Disciplines")
                        .HasForeignKey("EducationCycleId")
                        .HasConstraintName("FK_Disciplines_Education_cycles_and_modules")
                        .IsRequired();

                    b.Navigation("Cathedra");

                    b.Navigation("EducationCycle");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationCyclesAndModule", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.EducationCyclesAndModule", "EducationCycleParent")
                        .WithMany("InverseEducationCycleParent")
                        .HasForeignKey("EducationCycleParentId")
                        .HasConstraintName("FK_Education_cycles_and_modules_Education_cycles_and_modules");

                    b.Navigation("EducationCycleParent");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationPlan", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.AcademicYear", "AcademicYear")
                        .WithMany("EducationPlans")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("FK_Education_plans_Academic_years")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Specialty", "Specialtie")
                        .WithMany("EducationPlans")
                        .HasForeignKey("SpecialtieId")
                        .HasConstraintName("FK_Education_plans_Specialties")
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Specialtie");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationPlanSemesterDiscipline", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.EducationPlan", "EducationPlan")
                        .WithMany("EducationPlanSemesterDisciplines")
                        .HasForeignKey("EducationPlanId")
                        .HasConstraintName("FK_Education_plan_semester_disciplines_Education_plans")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.SemesterDiscipline", "SemesterDiscipline")
                        .WithMany("EducationPlanSemesterDisciplines")
                        .HasForeignKey("SemesterDisciplineId")
                        .HasConstraintName("FK_Education_plan_semester_disciplines_Semester_disciplines")
                        .IsRequired();

                    b.Navigation("EducationPlan");

                    b.Navigation("SemesterDiscipline");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Employee", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Employees_Posts")
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.FixedDiscipline", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Employee", "Employee")
                        .WithMany("FixedDisciplines")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Fixed_disciplines_Employees")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Group", "Group")
                        .WithMany("FixedDisciplines")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Fixed_disciplines_Groups")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.SemesterDiscipline", "SemesterDiscipline")
                        .WithMany("FixedDisciplines")
                        .HasForeignKey("SemesterDisciplineId")
                        .HasConstraintName("FK_Fixed_disciplines_Semester_disciplines")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Group");

                    b.Navigation("SemesterDiscipline");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Group", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Employee", "Curator")
                        .WithMany("Groups")
                        .HasForeignKey("CuratorId")
                        .HasConstraintName("FK_Groups_Employees")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.EducationPlan", "EducationPlan")
                        .WithMany("Groups")
                        .HasForeignKey("EducationPlanId")
                        .HasConstraintName("FK_Groups_Education_plans");

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducation", "ReceivedEducation")
                        .WithMany("Groups")
                        .HasForeignKey("ReceivedEducationId")
                        .HasConstraintName("FK_Groups_Received_educations")
                        .IsRequired();

                    b.Navigation("Curator");

                    b.Navigation("EducationPlan");

                    b.Navigation("ReceivedEducation");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducation", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.EducationLevel", "EducationLevel")
                        .WithMany("ReceivedEducations")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("FK_Received_educations_Education_levels")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducationForm", "ReceivedEducationForm")
                        .WithMany("ReceivedEducations")
                        .HasForeignKey("ReceivedEducationFormId")
                        .HasConstraintName("FK_Received_educations_Received_education_forms")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.ReceivedSpecialty", "ReceivedSpecialty")
                        .WithMany("ReceivedEducations")
                        .HasForeignKey("ReceivedSpecialtyId")
                        .HasConstraintName("FK_Received_educations_Received_specialties")
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("ReceivedEducationForm");

                    b.Navigation("ReceivedSpecialty");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducationForm", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.EducationForm", "EducationForm")
                        .WithMany("ReceivedEducationForms")
                        .HasForeignKey("EducationFormId")
                        .HasConstraintName("FK_Received_education_forms_Education_forms")
                        .IsRequired();

                    b.Navigation("EducationForm");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedSpecialty", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Specialty", "Specialtie")
                        .WithMany("ReceivedSpecialties")
                        .HasForeignKey("SpecialtieId")
                        .HasConstraintName("FK_Received_specialties_Specialties")
                        .IsRequired();

                    b.Navigation("Specialtie");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ScheduleDiscipline", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Audience", "Audience")
                        .WithMany("ScheduleDisciplines")
                        .HasForeignKey("AudienceId")
                        .HasConstraintName("FK_Schedule_disciplines_Audiences");

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.FixedDiscipline", "FixedDiscipline")
                        .WithMany("ScheduleDisciplines")
                        .HasForeignKey("FixedDisciplineId")
                        .HasConstraintName("FK_Schedule_disciplines_Fixed_disciplines")
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("FixedDiscipline");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ScheduleDisciplineReplacement", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Audience", "Audience")
                        .WithMany("ScheduleDisciplineReplacements")
                        .HasForeignKey("AudienceId")
                        .HasConstraintName("FK_Schedule_discipline_replacement_Audiences");

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.FixedDiscipline", "FixedDiscipline")
                        .WithMany("ScheduleDisciplineReplacements")
                        .HasForeignKey("FixedDisciplineId")
                        .HasConstraintName("FK_Schedule_discipline_replacement_Fixed_disciplines")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.ScheduleDiscipline", "ScheduleDiscipline")
                        .WithMany("ScheduleDisciplineReplacements")
                        .HasForeignKey("ScheduleDisciplineId")
                        .HasConstraintName("FK_Schedule_discipline_replacement_Schedule_disciplines");

                    b.Navigation("Audience");

                    b.Navigation("FixedDiscipline");

                    b.Navigation("ScheduleDiscipline");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.SemesterDiscipline", b =>
                {
                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.IntermediateCertificationForm", "CertificationForm")
                        .WithMany("SemesterDisciplines")
                        .HasForeignKey("CertificationFormId")
                        .HasConstraintName("FK_Semester_disciplines_Intermediate_certification_forms");

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Discipline", "Discipline")
                        .WithMany("SemesterDisciplines")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_Semesters_Disciplines_Disciplines")
                        .IsRequired();

                    b.HasOne("EducationProcess.Desktop.DataAccess.Entities.Semester", "Semester")
                        .WithMany("SemesterDisciplines")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_Semesters_Disciplines_Semesters")
                        .IsRequired();

                    b.Navigation("CertificationForm");

                    b.Navigation("Discipline");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.AcademicYear", b =>
                {
                    b.Navigation("EducationPlans");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Audience", b =>
                {
                    b.Navigation("ScheduleDisciplineReplacements");

                    b.Navigation("ScheduleDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Cathedra", b =>
                {
                    b.Navigation("CathedraSpecialties");

                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Discipline", b =>
                {
                    b.Navigation("SemesterDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationCyclesAndModule", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("InverseEducationCycleParent");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationForm", b =>
                {
                    b.Navigation("ReceivedEducationForms");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationLevel", b =>
                {
                    b.Navigation("ReceivedEducations");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.EducationPlan", b =>
                {
                    b.Navigation("EducationPlanSemesterDisciplines");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Audiences");

                    b.Navigation("FixedDisciplines");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.FixedDiscipline", b =>
                {
                    b.Navigation("ScheduleDisciplineReplacements");

                    b.Navigation("ScheduleDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Group", b =>
                {
                    b.Navigation("FixedDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.IntermediateCertificationForm", b =>
                {
                    b.Navigation("SemesterDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.LessonType", b =>
                {
                    b.Navigation("ConductedPairs");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducation", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedEducationForm", b =>
                {
                    b.Navigation("ReceivedEducations");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ReceivedSpecialty", b =>
                {
                    b.Navigation("ReceivedEducations");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ScheduleDiscipline", b =>
                {
                    b.Navigation("ConductedPairs");

                    b.Navigation("ScheduleDisciplineReplacements");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.ScheduleDisciplineReplacement", b =>
                {
                    b.Navigation("ConductedPairs");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Semester", b =>
                {
                    b.Navigation("SemesterDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.SemesterDiscipline", b =>
                {
                    b.Navigation("EducationPlanSemesterDisciplines");

                    b.Navigation("FixedDisciplines");
                });

            modelBuilder.Entity("EducationProcess.Desktop.DataAccess.Entities.Specialty", b =>
                {
                    b.Navigation("CathedraSpecialties");

                    b.Navigation("EducationPlans");

                    b.Navigation("ReceivedSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
